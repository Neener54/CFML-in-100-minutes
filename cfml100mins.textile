h1. CFML in 100 minutes

ColdFusion Markup Language (CFML) is a great programming language for beginners because it was written to make the programmer's job easy and not care if the computer's job is hard. In this brief introduction we'll look at the key language features you need to get started.

# Syntax
# Variables
# Components, Methods, and Parameters
# Strings
# Numbers
# Queries
# Arrays
# Structures
# Conditionals
## Conditional Decisions
## Conditional Looping
# Nothingness & Null

h2. CFML History

CFML is thought of by many as an old programming language, but ColdFusion actually has been continuously improved by Allaire, Macromedia, and now Adobe. The term __ColdFusion__ is often used synonymously with __CFML__. ColdFusion originated as proprietary technology, however, it is becoming less closed through the availability of competing open source products like Railo and OpenBD. ColdFusion was invented by Jeremy and JJ Allaire in 1995. Their idea for ColdFusion was originally designed to make it easier to connect simple HTML pages to a database, but now ColdFusion includes advanced features for enterprise integration and application development. 

When ColdFusion was originally released, it grew an audience quickly in the government and public sector. CFML tag syntax resembles HTML and the script syntax resembles JavaScript. You may want to focus on either the tag or script based examples depending on your comfort level.

And you want to learn CFML so here goes!

h2. 1. Syntax

There are two ways to write CFML code. You can use the tag or script syntax. For the examples, please focus on one or the other so this tutorial is not confusing. CFML includes a set of instructions you use in pages.  You will write one or more instructions in a file then run the file through a CFML engine. Two CFML instructions we will use in this tutorial are @CFSET@ and @CFOUTPUT@. @CFSET@ is used to create a variable and assign it a value. Also it is used to call functions. @CFCOUTPUT@ displays a variable's value.

We might have a file named @myprogram.cfm@ and @Sample.cfc@ like this:

h3. Tag Syntax

<table>
	<tr>
		<td>myprogram.cfm</td>
		<td>Sample.cfc</td>
	</tr>
	<tr>
		<td>
<pre>
<code>
 <cfset s = CreateObject("component","Sample") />

 <cfoutput>
  #s.hello()#
 </cfoutput>
</code>
</pre>
		</td>
		<td>
<pre>
<code>
 <cfcomponent>
  <cffunction name="hello">
   <cfreturn "Hello, World!" />
  </cffunction>
 </cfcomponent>
</code>
</pre>
		</td>
	</tr>
</table>

h3. Script Syntax

<table>
	<tr>
		<td>myprogram.cfm</td>
		<td>Sample.cfc</td>
	</tr>
	<tr>
		<td>
<pre>
<code>
<cfscript>
 s = CreateObject("component","Sample");
 writeOutput( s.hello() );
</cfscript>
</code>
</pre>
		</td>
		<td>
<pre>
<code>
component {
 public string function hello(){
  return( "Hello, World!" );
 }
}
</code>
</pre>
		</td>
	</tr>
</table>

h2. 2. Variables

Everything needs a name so we can refer to it. A variable, like in math, is just a name for a piece of data. In CFML variables are very flexible and can be changed at any time. Variables are assigned using a single equals sign ( = ) where the *right* side of the equals sign is evaluated first, then the value is assigned to the variable named on the *left* side of the equals. 

Go into a CFML file, enter in these example instructions, and observe the output that CFML gives you back:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset a = 5 />
 <cfset b = 10 + 5 />
 <cfset c = 15 + a + b />
 <cfset b = c - a />
 <cfset d = "Hello, " />
 <cfset e = "World!" />
 <cfset f = d & e />
 <cfset g = d & a & e />
 <cfset b = "hi!" />

 <cfoutput>
  a = #a#<br/>
  b = #b#<br/>
  c = #c#<br/>
  d = #d#<br/>
  e = #e#<br/>
  f = #f#<br/>
  g = #g#<br/>
 </cfoutput>
</code>
</pre>
</td>
<td>
<pre>
<code>
 <cfscript>
  a = 5;
  b = 10 + 5;
  c = 15 + a + b;
  b = c - a;
  d = "Hello, ";
  e = "World!";
  f = d & e;
  g = d & a & e;
  b = "hi!";
  
  writeOutput("a = #a#<br/>");
  writeOutput("b = #b#<br/>");
  writeOutput("c = #c#<br/>");
  writeOutput("d = #d#<br/>");
  writeOutput("e = #e#<br/>");
  writeOutput("f = #f#"<br/>");
  writeOutput("g = #g#<br/>");
 </cfscript>
</code>
</pre>
</td>
</tr>
</table>

*The first few lines are simple if you've done any programming language before, but the last few get interesting when combining strings and numbers.

h2. 3. Components, Methods, and Parameters

h3. Components

In CFML, a ColdFusion component (CFC) file contains data and functions. Components are a building blocks for objects. Objects know information, called attributes, and can do actions, called methods. In ColdFusion the @cffunction@ tag is used to define methods within a CFC.

For an example of an object, think about you as a human being. You have attributes like height, weight, and eye color. You have methods like walk, run, wash dishes, and daydream. Different kinds of objects have different attributes and methods. In the next sections we'll look at a few specific instructions in CFML.

In CFML we define an object using the @cfcomponent@ instruction and save the file as @.cfc@, here’s an example defining the object type @PersonalChef.cfc@:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfcomponent>

 </cfcomponent>
</code>
</pre>
</td>
<td>
<pre>
<code>
component {

}
</code>
</pre>
</td>
</tr>
</table>

h3. Methods

Inside the CFC we usually define one or more methods using the @cffunction@ instruction like this:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfcomponent>
  <cffunction name="make_toast">
   <cfset makeToast = "Making your toast!" />
  </cffunction>
 </cfcomponent>
</code>
</pre>
</td>
<td>
<pre>
<code>
component {
 public string function make_toast(){
  makeToast = "Making your toast!";
 }
}
</code>
</pre>
</td>
</tr>
</table>

Inside the @cffunction@ instruction we'd put the code for how the chef should make the toast.

A class is an abstract idea, it defines what all objects of that type can know and do. Think of the chair you're sitting in. Its not an abstract chair, it is an actual chair. We'd call this actual chair an *instance*. It is a __realization__  of the idea chair. It has measurable attributes like height, color, weight. The *class* chair, on the other hand, is __abstract__ . The class's weight, color, and size we can't determine them ahead of time.

Once we define a class, we create an instance of that class like this:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset frank = New PersonalChef() />
</code>
</pre>
</td>
<td>
<pre>
<code>
 frank = New PersonalChef();
</code>
</pre>
</td>
</tr>
</table>

We're calling the @New@ instruction on the class @PersonalChef@ and storing it into the variable named @frank@. Once we have the instance, we can set or get its attributes and call its methods. Methods are called by using this syntax: @object.method_name()@. So if you have a person named @frank@ you would tell him to make toast by calling @frank.make_toast()@.

The @New@ instruction creates a new instance of an object and calls it’s init() method (if existing). Any arguments supplied to the object will be passed to the init() method. The init() method should return the object instance using @return this;@ in order to have the same expected behavior as the @CreateObject@ statement. If no init() method exists, the object will be returned normally.

h3. Method Parameters

Sometimes methods take one or more _parameters_ that tell them *how* to do what they're supposed to do. For instance, I might call @frank.make_toast('burned')@ for him to burn my toast. Or maybe he has another method where I call @frank.make_breakfast("toast","eggs")@ for him to make both toast and eggs. Parameters can be numbers, strings, or any kind of object. When a method takes a parameter we use the @cfargument@ instruction, it'll look like this:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfcomponent>
  <cffunction name="make_toast" returnType="string">
   <cfargument name="color" required="yes">
    <cfset makeToast = "Making your toast #arguments.color#!" />
  </cffunction>
 </cfcomponent>
</code>
</pre>
</td>
<td>
<pre>
<code>
component {
 public string function make_toast(required String color){
  makeToast = "Making your toast #arguments.color#!";
 }
}
</code>
</pre>
</td>
</tr>
</table>

The method is expecting us to pass in a @color@ telling it how to do the method @make_toast@.

h3. Return Value

In CFML, every time you call a method you won't necessarily get a value back. By default, a CFML method returns __nothing__ . We'll talk about __nothing__ and @null@ in the last section of CFML in 100 minutes. If you called @make_toast@ method above like @<cfset result = frank.make_toast('burned') />@ or @set result = frank.make_toast('burned');@, and tried to output @result@ you should have seen @Variable RESULT is undefined@.

To return data, we use @cfreturn@ to instruct the method to return a @value@. Since that wasn't the last instruction before the ending @cffunction@ in your @make_toast@ method, you received __nothing__ and tried to putting that into the @result@ variable.

For the purposes of our next section I'm going to return the chef instance itself from the method. If you wanted to picture the metaphor, imagine you are looking at your chef @frank@. You say Frank, go make my toast, he tells you he's making the toast, goes to make it, then comes back to you to receive more instructions. He's returning himself to you. Here's how we implement it in code:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfcomponent>
  <cffunction name="make_toast" returnType="component">
   <cfargument name="color" required="yes">
    <cfset this.makeToast = "Making your toast #arguments.color#!" />
    <cfreturn this />
  </cffunction>
 </cfcomponent>
</code>
</pre>
</td>
<td>
<pre>
<code>
component {
 public component function make_toast(required String color){
  this.makeToast = "Making your toast #arguments.color#!";
  return this;
 }
}
</code>
</pre>
</td>
</tr>
</table>

h2. 4. Strings

In CFML a string is defined as a quote ( @"@ ) followed by zero or more letters, numbers, or symbols and followed by another quote ( @"@ ). Some simple strings would be @"hello"@ or @"This sentence is a string!"@. Strings can be anything from @""@, the empty string, to really long sets of text. This whole tutorial, for instance, is stored in a string. Strings have a few important functions that we'll use.

*  @Len@ 
Call @Len@ on a string to get back the number of characters in the string. For instance @Len("Hello")@ would give you back @5@.
*  @Replace@ 
The @Replace@ instruction replaces occurrences of *substring1* in a string with *substring2*, in a specified scope. The search is case sensitive and the scope default is one. For instance, @Replace("Hello", "e", "")@ would give you back @"hllo"@ after replacing the __first__ occurrence of @"e"@, or @Replace("Good Morning!", "o", "e", "All")"@ would give you @"Geed Merning!"@ 
*  @RemoveChars@ 
Call @RemoveChars@ to remove characters from a string. For instance, @RemoveChars("hello bob", 2, 5)@ would give you back @"hbob"@.  
*  @Mid@ 
The @mid@ function extracts a substring from a string. For instance, I could call @Mid("Welcome to CFML Jumpstart",4,12)@ and it would give you back: @come to CFML@.

Experiment with the following samples in a CFML file:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset tester = "Good Morning Everyone!" />
 <cfoutput>#len(tester)#</cfoutput><br>
 <cfoutput>#Replace(tester, "o", "e", "All")#</cfoutput><br>
 <cfoutput>#RemoveChars(tester, 2, 5)#</cfoutput><br>
 <cfset t2 = "sample,data,from,a,CSV" />
 <cfset t3 = Mid(t2,8,len(t2)) />
 <cfoutput>#t3#</cfoutput><br>
</code>
</pre>
</td>
<td>
<pre>
<code>
 <cfscript>
 tester = "Good Morning Everyone!";
 writeOutput("#len(tester)#<br/>");
 writeOutput(Replace(tester, "o", "e", "All") & "<br/>");
 writeOutput(RemoveChars(tester, 2, 5) & "<br/>");
 t2 = "sample,data,from,a,CSV";
 t3 = Mid(t2,8,len(t2));
 writeOutput(t3 & "<br/>");
</cfscript>
</code>
</pre>
</td>
</tr>
</table>

Often a string may store a list. A list isn't the best for performance and usage. We can convert a list into an array using @ListToArray@. We'll discuss arrays in an upcoming section. Try out these examples in the CFML file assuming we have the code from the last examples:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset t4 = ListToArray(t3) />
 <cfoutput>
  #t4[2]#
 </cfoutput>
</code>
</pre>
</td>
<td>
<pre>
<code>
 <cfscript>
 t4 = ListToArray(t3);
 writeOutput(t4[2]);
 </cfscript>
</code>
</pre>
</td>
</tr>
</table>

The numbers inside the @[]@ brackets specify which of the array you want pulled out. They're numbered starting with 1. So the first example pulls out the array item from 1, the beginning of the list, up to position four.

h3. Combining Strings and Variables

It is extremely common that we want to combine the value of a variable with other strings. For instance, lets start with this simple example string:

@"Happy Saturday!"@

When we put that into the CFML file, it just spits back the same string. If we were writing a proper program we might want it to greet the user when they start the program by saying @"Happy"@ then the day of the week. So we can't just put a string like @"Happy Saturday!"@ or it'd be saying Saturday even on Tuesday.

What we need to do is combine a variable with the string. There are two ways to do that. The first and easiest approach is called _string concatenation_ which is basically just adding strings together:

@today =  "Saturday"@

In the first line we setup a variable to hold the day of the week. Then we'll printed the string __Happy__ combined with the value of the variable @today@ and the string __!__. You might be thinking. What was the point of that since we still just wrote __Saturday__ in the first line? Ok, well, if you were writing a real program you'd use CFMLs built-in date functions like this:

@today = DayOfWeek(Now())@

@Now()@ gets the current date and time of the computer running the ColdFusion server. @DayOfWeek@ returns an integer in the range 1 (Sunday) to 7 (Saturday) for the day of the week. We still don't have the day of week as string. Try this:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset today = DayOfWeekAsString(DayOfWeek(Now())) />
 <cfset message = "Happy " & today & "!" />
 <cfoutput>
 #message#
 </cfoutput>
</code>
</pre>
</td>
<td>
<pre>
<code>
<cfscript>
 today = DayOfWeekAsString(DayOfWeek(Now()));
 message = "Happy " & today & "!";
 writeOutput(message);
</cfscript>
</code>
</pre>
</td>
</tr>
</table>

Great, no errors and our output looks correct. @DayOfWeekAsString@ did the trick. There is another string combination method called _string interpolation_.

 *String interpolation* is the process of sticking data into the middle of strings. We use the symbols @#@ around the @variable@ where in a string the value should be inserted. Inside those hashes we can put any variables and output in that spot. Our previous example could be rewritten like this:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset today = DayOfWeekAsString(DayOfWeek(Now())) />
 <cfset message = "Happy #today#!" />
 <cfoutput>
 #message#
 </cfoutput>
</code>
</pre>
</td>
<td>
<pre>
<code>
 <cfscript>
 today = DayOfWeekAsString(DayOfWeek(Now()));
 message = "Happy #today#!";
 writeOutput(message);
 </cfscript>
</code>
</pre>
</td>
</tr>
</table>

If you compare the output you'll see that this second method gives the exact same results. The code itself is a little more compact and, personally, I find it much easier to read.

Basically interpolating means evaluate the code inside this @#@ wrapper and put it into the string.

h2. 5. Numbers

There are two basic kinds of numbers in CFML: integers (whole numbers) and real (numbers with decimal point). For our workshop, we'll only be dealing with integers. You can use normal math operations with integers including @+@, @-@, @/@, and @*@. Integers have a bunch of functions to help you do math-related things, but the only one we might use controls a loop.

The @times@ method can be used to repeat one or more instructions a certain number of times. Try out this example:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 5.times do 
 	puts "Hello, world!" 
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
 Script Example Here
</code>
</pre>
</td>
</tr>
</table>

In this example were using the @times@ method with a @do@ / @end@ block. When we call the @times@ method we need to tell it what to do that number of times. CFML looks for the starting instruction @do@ and the ending instruction @end@. Each instruction between the @do@ and @end@ will be executed this number of @times@. Try this example with multiple instructions:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 5.times do 
  puts "Good morning!" 
  puts "...is it lunch time yet?" 
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
 Script Example Here
</code>
</pre>
</td>
</tr>
</table>

h2. 6. Queries

TODO: More about Queries objects in CFML.

h2. 7. Arrays

Often we need to organize a group and put them into a __collection__. There are two main types of collections: *arrays* and *structures*.

An *array* is a number-indexed list. Picture a city block of houses. Together they form an array and their addresses are the *indices*. Each house on the block will have a unique address. Some addresses might be empty, but the addresses are all in a specific order. The *index* is the address of a specific element inside the array. In CFML the index always begins with @1@. An array is defined in CFML as an opening [, then zero or more elements, then a closing ]. Try out this code:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset favorite_colors = ["red","blue","green","black","brown"] />
 <cfdump var="#favorite_colors#" /><br>
 <cfdump var="#favorite_colors[2]#" /><br>
 <cfdump var="#favorite_colors[ArrayLen(favorite_colors)]#" /><br>
</code>
</pre>
</td>
<td>
<pre>
<code>
  <cfscript>
  set favorite_colors = ["red","blue","green","black","brown"];
  writeDump(favorite_colors);
  writeOutput("<br>");
  writeDump(favorite_colors[2]);
  writeOutput("<br>");
  writeDump(var=favorite_colors[ArrayLen(favorite_colors)]);
  </cfscript>
</code>
</pre>
</td>
</tr>
</table>

Keep going with these, but note that the first line below should give you some unusual output. Try and understand what CFML is telling you:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 <cfset ArrayAppend(favorite_colors, "orange") />
 <cfdump var="#favorite_colors#" /><br>
 <cfset ArraySort(favorite_colors,"text") />
 <cfdump var="#favorite_colors#" /><br>
</code>
</pre>
</td>
<td>
<pre>
<code>
 <cfscript>
 set = ArrayAppend(favorite_colors, "orange");
 writeDump(favorite_colors);
 writeOutput("<br>");
 set = ArraySort(favorite_colors,"text");
 writeDump(var=favorite_colors);
 writeOutput("<br>"); 
 </cfscript>
</code>
</pre>
</td>
</tr>
</table>

In order to get a specific element in the array you use the syntax @arrayname[index]@. So looking at the @favorite_colors@ array:

* Whats the index of @"brown"@ ?
* Why did the fifth line of the example give you @nil@ ? (For more discussion of @nil@, check out the very end of this document).
* What did the @<<@ operator do to the collection?

There are lots of cool things to do with an array. You can rearrange the order of the elements using the @ArraySort@ instruction. You can iterate through each element using the @each@ method. You can mash them together into one string using the @join@ method. You can find the address of a specific element by using the @index@ method. You can ask an array if an element is present with the @include?@ method. Try out this example that brings a bunch of things together:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 sorted_colors = favorite_colors.sort 
 sorted_colors.each do |color| 
  puts "#{color} is #{color.length} letters long" 
 end 
 puts sorted_colors.join("&") 
 target = "green" 
 position = favorite_colors.index(target) 
 puts ""
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
 Script Example Here
</code>
</pre>
</td>
</tr>
</table>

The color #{target} is in position #{position}"We use arrays whenever we need a list where the elements are in a specific order.

h2. 8. Structures

A structure is a collection of data where each element of data is addressed by a name. As an analogy, think about a classroom of children. Under ideal circumstances, each student has a name and can be found by using that name. We might look in a science classroom for a child named Joey and that would result in finding an actual student. We could write this like @science["Joey"]@ which could be read as look in the collection named @science@ and find the thing named @Joey@.

A structure is an unordered collection, its just a bunch of data collected together where each one has a unique name. Structures have a more complicated syntax that takes some getting used to:

ages = {"joey" =>12, "jill" =>14, "jack" =>11, "jane" =>12} puts "Joey is #{ages['joey']} years old"Here we create a structure named @ages@. Structures are made up what are called key-value pairs.The *key* is used as the address and the *value* is the object at that address. In the @ages@ structure we have keys including @"joey"@ and @"jill"@ and values including @12@ and @14@. When creating a structure the key and value are linked by the @=>@ symbol which is called a _rocket_. So structures start with a curly bracket @{@, have zero or more entries made up of a _key_, a rocket, and a _value_ separated by commas, then end with a closing curly bracket @}@.

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 ages["jimmy"] = 14 
 ages["joey"] = 9 
 puts ages.keys 
 puts ages.values
</code>
</pre>
</td>
<td>
<pre>
<code>
 Script Example Here
</code>
</pre>
</td>
</tr>
</table>

In the second chunk of the example, we add a new value to the structure. Since the @"jimmy"@ key wasn't in the original structure, its added with the value of @14@. If the key @"jimmy"@ already existed then the value would be replaced by @14@. Every key in a structure must be unique! In the second line we reference the key @"joey"@ which already exists, so the value gets replaced with the @9@. Then, just to show you the state of the structure, we print out the list of keys and the list of values.

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 students = ages.keys.sort 
 students.each do |student| 
 puts "#{student} is #{ages[student]} years old." 
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
 Script Example Here
</code>
</pre>
</td>
</tr>
</table>

The last chunk of the example calls the @keys@ method on the structure @ages@. @keys@ gives back an array holding all the key values inside the structure. We then called @sort@ on that array to put them in alphabetical order before storing the array into the variable @students@. We then iterated through the array @students@ using the method @each@, gave each element of the list the name @student@, then printed out one line with that student name and the students age from @ages@.

While that last part probably seemed complicated, its just to illustrate that although structures are by nature unordered, you can still manipulate and output the data in ordered, meaningful ways.

h2. 9. Conditionals

Conditional statements evaluate to @true@ or @false@ only. The most common conditional operators are @==@ (equal), @>@ (greater than), @>=@ (greater than or equal to), @<@ (less than), and @<=@ (less than or equal to).

Some objects also have methods which return a @true@ or @false@, so they're used in conditional statements. For example every object has the method @.nil?@ which is @true@ only when the object is @nil@. Arrays have a method named @.include?@ which returns true if the array includes the specified element.

h3. Conditional Decisions

Why do we have conditional statements? Most often its to control conditional instructions, especially @if@ / @elsif@ / @else@ structures. Lets write an example by adding a method to our @PersonalChef@ class:

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 def water_boiling?(minutes) 
  if minutes<7 
   puts "The water is not boiling yet." 
  elsif minutes == 7 
   puts "It's just barely boiling" 
  elsif minutes == 8 
   puts "It's boiling!" 
  else 
   puts "Hot! Hot! Hot!" 
 end 
 return self 
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
 Script Example Here
</code>
</pre>
</td>
</tr>
</table>

Try this example using @5@, @7@, @8@ and @9@ for the values of @minutes@.

When the @minutes@ is 5, here is how the execution goes: Is it @true@ that 5 is less than 7? Yes, it is, so print out the line @The water is not boiling yet.@.

When the @minutes@ is 7, it goes like this: Is it @true@ that 7 is less than 7? No. Next, is it @true@ that 7 is equal to 7? Yes, it is, so print out the line @It's just barely boiling@.

When the @minutes@ is 8, it goes like this: Is it @true@ that 8 is less than 7? No. Next, is it @true@ that 8 is equal to 7? No. Next, is it @true@ that 8 is equal to 8? Yes, it is, so print out the line @It's boiling!@.

Lastly, when total is 9, it goes:" Is it @true@ that 9 is less than 7? No. Next, is it @true@ that 9 is equal to 7? No. Next, is it @true@ that 9 is equal to 8? No. Since none of those are true, execute the @else@ and print the line @Hot! Hot! Hot!@.

An @if@ block has

* One @if@ statement whose instructions are executed only if the statement is true
* Zero or more @elsif@ statements whose instructions are executed only if the statement is true
* Zero or one @else@ statement whose instructions are executed if no @if@ nor @elsif@ statements were true

Only _one_ section of the @if@ / @elsif@ / @else@ structure can have its instructions run. If the @if@ is @true@, for instance, CFML will never look at the @elsif@. Once one block executes, thats it.

h3. Conditional Looping

Another time we use conditional statements is when we want to repeat a set of instructions. Try out this simple example by adding it to your @personal_chef.rb@ :

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 def countdown(counter) 
  while counter>0 
   puts "The counter is #{counter}" 
   counter = counter - 1 
  end 
 return self 
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
</code>
</pre>
</td>
</tr>
</table>

See how that works? The @counter@ starts out as whatever parameter we pass in. The @while@ instruction evaluates the conditional statement @counter>0@ and finds that yes, the counter is greater than zero. Since the condition is true, execute the instructions inside the loop. First print out @"The counter is #{counter}"@ then take the value of @counter@, subtract one from it, and store it back into @counter@. Then the loop goes back to the @while@ statement. Is it still true? If so, print the line and subtract one again. Keep repeating until the condition is false.

I most often use @while@, but you can achieve the same results using @until@ as well. Try this

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 def countdown(counter) 
  until counter == 0 
   puts "The counter is #{counter}" counter = counter - 1 
  end 
 return self 
 end
</code>
</pre>
</td>
<td>
<pre>
<code>
</code>
</pre>
</td>
</tr>
</table>

The #1 mistake people encounter when writing conditional statements is the difference between @=@ and @==@.

*  @=@ is an _assignment_. It meanstake whats on the right side and stick it into whatever is on the left sideits _telling_, not _asking_ 
*  @==@ is a _question_. It meansis the thing on the right equal to the thing on the left?its _asking_, not _telling_ 

You can also combine conditional statements using logical operators. The most common are known aslogical andandlogical or. In CFML you can write a logical and with either the work @and@ or with double ampersands like this: @&&@. You can write a logical or with the word @or@ or with double pipes like this: @||@. For each operation, the symbolic representation ( @&&@ and @||@ ) is more common.

h2. 10. Nulls & Nothingness

What is __nothingness__? Is there nothingness only in outer space? Really, when we think of __nothing__ isn't it just the absence of something? Ok, thats too much philosophy

ColdFusion did not have a way of referring to nothingness until version 9. ColdFusion can recieve a @NULL@ value from an external source and maintain the @NULL@ value until you try to use it. ColdFusion will convert the @NULL@ into an empty string (in the case of queries) or potentially destroy the variable altogether. However now with greater support for @NULL@ values, ColdFusion allows you to pass in and return a @NULL@ value from a method. @IsNull()@ instruction will test for @NULL@ values and return @true@ or @false@.

If you have three eggs, eat three eggs, then you might think you have __nothing__ , but in terms of eggs you have @0@. Zero is something, its a number, and its __not nothing__ .

A large percentage of the errors you encounter while writing CFML code will involve a variable not existing. You thought something was there, you tried to do something to it, and you can't do something to nothing so CFML creates an error. Lets rewrite our @make_eggs@ method to illustrate @NULL@ :

<table>
<tr>
<td>tag</td><td>script</td>
</tr>
<tr>
<td>
<pre>
<code>
 tag example
</code>
</pre>
</td>
<td>
<pre>
<code>
 public component function make_eggs(numeric quantity){
  if(IsNull(arguments.quantity)) {
   this.makeEggs = "How am I supposed to make nothingness number of eggs?";
  } else {
   this.makeEggs = "Making your #arguments.quantity# eggs!";
   this.yourEggs = ArrayNew(1);
   while (ArrayLen(this.yourEggs) LT arguments.quantity)
	{ ArrayAppend(this.yourEggs, "Making an Egg."); };
  }
  return this;
 }
</code>
</pre>
</td>
</tr>
</table>

Reload the file, call @frank.make_eggs(3)@ then try @frank.make_eggs()@. TODO: More Explaination